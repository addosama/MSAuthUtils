package com.yukibytes.utils.mc.msa;

import com.sun.net.httpserver.HttpServer;
import org.json.JSONObject;

import java.awt.*;
import java.io.*;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.*;

/**
 * Auto-generated by Deepseek-V3 AI Assistant
 * Addo6544 improved
 * Copyright (c) 2024 Deepseek-V3
 */

public class MicrosoftAuthenticator {
    private final String clientId;
    private final String clientSecret;
    private final int callbackPort;
    private final String redirectUri;
    private CompletableFuture<MinecraftAccount> authFuture;

    public MicrosoftAuthenticator(String clientId, String clientSecret, int callbackPort) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.callbackPort = callbackPort;
        this.redirectUri = "http://localhost:" + callbackPort + "/auth";
    }

    public CompletableFuture<MinecraftAccount> authenticate() throws IOException {
        authFuture = new CompletableFuture<>();
        startCallbackServer();
        openAuthPage();
        return authFuture;
    }

    private void openAuthPage() throws IOException {
        String authUrl = "https://login.microsoftonline.com/consumers/oauth2/v2.0/authorize?" +
                "client_id=" + clientId +
                "&response_type=code" +
                "&redirect_uri=" + URLEncoder.encode(redirectUri, StandardCharsets.UTF_8.name()) +
                "&scope=XboxLive.signin%20offline_access" +
                "&response_mode=query";

        Desktop.getDesktop().browse(URI.create(authUrl));
    }

    private void startCallbackServer() throws IOException {
        HttpServer server = HttpServer.create(new InetSocketAddress(callbackPort), 0);
        server.createContext("/auth", exchange -> {
            try {
                Map<String, String> params = parseQueryParams(exchange.getRequestURI().getQuery());
                if (params.containsKey("code")) {
                    handleAuthCode(params.get("code"), exchange);
                } else {
                    sendErrorResponse(exchange, "Authentication failed");
                }
            } finally {
                server.stop(0);
            }
        });
        server.start();
    }

    private void handleAuthCode(String code, com.sun.net.httpserver.HttpExchange exchange) {
        try {
            // 获取Microsoft访问令牌
            JSONObject tokenResponse = postRequest(
                    "https://login.microsoftonline.com/consumers/oauth2/v2.0/token",
                    "client_id=" + clientId +
                            "&client_secret=" + URLEncoder.encode(clientSecret, StandardCharsets.UTF_8.name()) +
                            "&code=" + code +
                            "&grant_type=authorization_code" +
                            "&redirect_uri=" + URLEncoder.encode(redirectUri, StandardCharsets.UTF_8.name())
            );

            // 获取Xbox Live令牌
            JSONObject xboxToken = postJsonRequest(
                    "https://user.auth.xboxlive.com/user/authenticate",
                    new JSONObject()
                            .put("Properties", new JSONObject()
                                    .put("AuthMethod", "RPS")
                                    .put("SiteName", "user.auth.xboxlive.com")
                                    .put("RpsTicket", "d=" + tokenResponse.getString("access_token")))
                            .put("RelyingParty", "http://auth.xboxlive.com")
                            .put("TokenType", "JWT"),
                    "XBL3.0 x="
            );

            // 获取XSTS令牌
            JSONObject xstsToken = postJsonRequest(
                    "https://xsts.auth.xboxlive.com/xsts/authorize",
                    new JSONObject()
                            .put("Properties", new JSONObject()
                                    .put("SandboxId", "RETAIL")
                                    .put("UserTokens", new String[]{xboxToken.getString("Token")}))
                            .put("RelyingParty", "rp://api.minecraftservices.com/")
                            .put("TokenType", "JWT"),
                    "XBL3.0 x="
            );

            // 获取Minecraft令牌
            JSONObject mcToken = postJsonRequest(
                    "https://api.minecraftservices.com/authentication/login_with_xbox",
                    new JSONObject()
                            .put("identityToken", "XBL3.0 x=" + xstsToken.getJSONObject("DisplayClaims").getJSONArray("xui").getJSONObject(0).getString("uhs") + ";" + xstsToken.getString("Token")),
                    "Bearer"
            );

            // 获取Minecraft账户信息
            JSONObject profile = getRequest(
                    "https://api.minecraftservices.com/minecraft/profile",
                    mcToken.getString("token_type") + " " + mcToken.getString("access_token")
            );

            String skinURL = null;
            boolean classic = true;
            if (profile.has("skins")) {
                for (Object o : profile.getJSONArray("skins")) {
                    JSONObject skin = (JSONObject) o;
                    if (skin.has("state") && "ACTIVE".equals(skin.getString("state"))) {
                        skinURL = skin.getString("url");
                        break;
                    }
                    if (skin.has("variant")) {
                        classic = "CLASSIC".equals(skin.getString("variant"));
                    }
                }
            }

            MinecraftAccount account = new MinecraftAccount(
                    profile.getString("name"),
                    profile.getString("id"),
                    mcToken.getString("access_token"),
                    tokenResponse.optString("refresh_token"),
                    skinURL,
                    classic
            );

            sendSuccessResponse(exchange);
            authFuture.complete(account);
        } catch (Exception e) {
            authFuture.completeExceptionally(e);
            try {
                sendErrorResponse(exchange, e.getMessage());
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        }
    }

    // HTTP请求辅助方法
    private JSONObject postRequest(String url, String params) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);
        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

        try (OutputStream os = conn.getOutputStream()) {
            os.write(params.getBytes(StandardCharsets.UTF_8));
        }

        return parseResponse(conn);
    }

    private JSONObject postJsonRequest(String url, JSONObject data, String authPrefix) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod("POST");
        conn.setDoOutput(true);
        conn.setRequestProperty("Content-Type", "application/json");
        conn.setRequestProperty("Accept", "application/json");
        if (authPrefix != null) {
            conn.setRequestProperty("Authorization", authPrefix + data.getString("Token"));
        }

        try (OutputStream os = conn.getOutputStream()) {
            os.write(data.toString().getBytes(StandardCharsets.UTF_8));
        }

        return parseResponse(conn);
    }

    private JSONObject getRequest(String url, String auth) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setRequestMethod("GET");
        conn.setRequestProperty("Authorization", auth);
        return parseResponse(conn);
    }

    private JSONObject parseResponse(HttpURLConnection conn) throws IOException {
        int status = conn.getResponseCode();
        try (InputStream is = status >= 400 ? conn.getErrorStream() : conn.getInputStream()) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                response.append(line);
            }
            JSONObject json = new JSONObject(response.toString());
            if (status >= 400) {
                throw new IOException("HTTP Error " + status + ": " + json.optString("error", "Unknown error"));
            }
            return json;
        }
    }

    private Map<String, String> parseQueryParams(String query) {
        Map<String, String> params = new HashMap<>();
        if (query != null) {
            for (String pair : query.split("&")) {
                String[] keyValue = pair.split("=");
                if (keyValue.length == 2) {
                    try {
                        params.put(keyValue[0], URLDecoder.decode(keyValue[1], StandardCharsets.UTF_8.name()));
                    } catch (UnsupportedEncodingException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
        }
        return params;
    }

    private void sendSuccessResponse(com.sun.net.httpserver.HttpExchange exchange) throws IOException {
        String response = "<h1>登录成功！可以关闭此窗口</h1>\n<h3>Login successful! You can close this window</h3>";
        exchange.sendResponseHeaders(200, response.getBytes().length);
        try (OutputStream os = exchange.getResponseBody()) {
            os.write(response.getBytes());
        }
    }

    private void sendErrorResponse(com.sun.net.httpserver.HttpExchange exchange, String error) throws IOException {
        String response = "<h1>登录失败: " + error + "</h1>\n<h3>Login Failed: " + error + "</h3>";
        exchange.sendResponseHeaders(400, response.getBytes().length);
        try (OutputStream os = exchange.getResponseBody()) {
            os.write(response.getBytes());
        }
    }
}